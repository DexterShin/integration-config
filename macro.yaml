# Git comes with a whitespace checking system that will fail whenever the diff
# contains trailing spaces.  We can use that to easily lint whitespaces in
# submitted changes.

- builder:
    name: erblint-HEAD
    builders:
     - shell: |
        /var/lib/jenkins/bin/git-changed-in-head erb \
        | xargs -n1 -I {} -t sh -c 'erb -P -x -T - {} | ruby -c'

- builder:
    name: pplint-HEAD
    builders:
     - shell: |
        /var/lib/jenkins/bin/git-changed-in-head pp \
        | xargs -n1 -t puppet parser validate

# Lint whitespace in directory {dir}. Usefull when the Git repository has
# been fetched out in some subdirtory of the Workspace. Example:
#
#  builder:
#    - lint-whitespaces-in:
#       dir: "$WORKSPACE/extensions/Foobar"
#
- builder:
    name: lint-whitespaces-in
    builders:
        - shell: "git --work-tree=\"{dir}\" diff --color --check HEAD^..HEAD"

# Lint whitespaces under $WORKSPACE. This is most probably the one you
# want to use. Example:
#
# builder:
#  - lint-whitespaces
#
- builder:
    name: lint-whitespaces
    builders:
     - lint-whitespaces-in:
        dir: '$WORKSPACE'

# `get-mw-core` injects mediawiki/core@{requested branch} in $WORKSPACE
# This should be used when testing extensions
#
# The aim is to get the very latest MediaWiki core version into the extension
# workspace without having to fully clone the repository. We cant use git
# archive with Gerrit so we get the code from the local replicated clone.
- builder:
    name: get-mw-core
    builders:
        - shell: |
            #!/bin/bash -xe
            # Snapshot `remotes/origin/{branch}` in the job workspace
            git archive --remote=/var/lib/git/mediawiki/core.git {branch} \
                | (cd "$WORKSPACE" && tar xf -)

- builder:
    name: jshint-in
    # Use `cd` because jshint reads .jshintrc and .jshintignore
    # from current working directory.
    builders:
     - shell: |
        #!/bin/bash -xe
        cd "{dir}"
        /var/lib/jenkins/bin/jshint .

- builder:
    name: jshint
    builders:
     - jshint-in:
        dir: '$WORKSPACE'

- builder:
    name: jsduck
    builders:
    # Zuul uses Python str.format(obj) for {config} substitutions
    # Escape as {foo} as {{key}} to avoid triggering a KeyError in Zuul parser
     - shell: |
        #!/bin/bash
        echo "Running JSDuck with {config}..."
        # Get version
        # - ZUUL_REF: refs/zuul/master/Z74178670e7c5495199f8a92e92cf609c
        # - GERRIT_BRANCH: master
        if [[ "$ZUUL_REF" =~ ^refs/tags/(.*) ]]
        then
            version="${{BASH_REMATCH[1]}}"
        elif [[ -n "$GERRIT_BRANCH" ]]
        then
            version="$GERRIT_BRANCH"
        else
            version="unknown"
        fi
        jsduck --config="{config}" --footer="Generated for branch ${{version}} on {{DATE}} by {{JSDUCK}} {{VERSION}}." --color --warnings-exit-nonzero
        ec=$?
        # Exit with exit code of jsduck command
        exit $ec

- builder:
    name: qunit
    builders:
     - shell: |
        #!/bin/bash -x
        # Create unique sub directory name
        TEST_ID=`echo "$ZUUL_PROJECT/$ZUUL_COMMIT" | tr '/' '-'`
        # Configure MediaWiki
        echo -e \
         "\$wgServer = 'http://localhost:9412';\n"\
         "\$wgScriptPath = '/${TEST_ID}';\n"\
         "\$wgEnableJavaScriptTest = true;\n" >> $WORKSPACE/LocalSettings.php
        # The location is free or we make it free
        test ! -e /srv/localhost/qunit/$TEST_ID || rm /srv/localhost/qunit/$TEST_ID;
        # Publish our install in the QUnit server document root
        ln -s $WORKSPACE /srv/localhost/qunit/$TEST_ID
        # Fetch headers for debug information (HTTP 500 Error, Database error, etc.)
        curl --include "http://localhost:9412/$TEST_ID/index.php?title=Special:BlankPage" | head -n42
        # Run QUnit tests via PhantomJS
        /var/lib/jenkins/bin/wmfgrunt qunit --verbose --qunit-url="http://localhost:9412/$TEST_ID/index.php?title=Special:JavaScriptTest/qunit"
        gqec=$?
        # Clean up
        rm /srv/localhost/qunit/$TEST_ID
        # Re-use exit code of grunt-qunit command
        exit $gqec

# - src: (without trailing slash)
# - project: (usually repo name or a custom title like "VisualEditor") - will be escaped
# - version: (usually branch name) - will be escaped
- builder:
    name: documentation-sync
    builders:
     - documentation-sync-subdir:
        src: '{src}'
        project: '{project}'
        version: '{version}'
        subdir: ''

# Is there a way to make the jjb/yaml "{subdir}" param optional?
# Then we could make it default to empy string instead of creating
# a separate builder
# - subdir: (must have trailing slash) - will not be escaped
- builder:
    name: documentation-sync-subdir
    builders:
     - shell: |
        # Set destination and version directory therein
        DEST_DIR="/srv/org/wikimedia/doc"
        DEST_PROJECTDIR=`echo "{project}" | tr '/' '-'`
        DEST_VERSIONDIR=`echo "{version}" | tr '/' '-'`
        DEST_EXTRAPATH="{subdir}"
        # Ensure the destination exists
        mkdir -p "$DEST_DIR/$DEST_PROJECTDIR/$DEST_VERSIONDIR/$DEST_EXTRAPATH"
        # Publish it (trailing slash is important!)
        rsync --recursive --delete-after --force {src}/ "$DEST_DIR/$DEST_PROJECTDIR/$DEST_VERSIONDIR/$DEST_EXTRAPATH"

# Has to be named something other than 'checkstyle' or python will
# go into infinite recursion when generating the jobs.
# JSHint considers all errors to be "high" priority except those
# suppressed via options in jshintrc (those become "normal").
# So we need to make sure we don't count warnings that are intentionally
# ignored by style or convention of the repository.
- publisher:
    name: checkstyle-xml
    publishers:
     - checkstyle:
        pattern: 'checkstyle-*.xml'
        canRunOnFailed: true
        healthy: 0
        unHealthy: 100
        healthThreshold: 'high'
        thresholds:
            unstable:
                totalHigh: 10
            failed:
                totalHigh: 1

- builder:
    name: mw-get-extensions
    builders:
        - shell: "/var/lib/jenkins/tools/fetch-mw-ext {dependencies}"

- builder:
    name: mw-run-update-script
    builders:
        - shell: 'php "$WORKSPACE/maintenance/update.php" --quick'

- builder:
    name: mw-install-sqlite
    builders:
     - shell: |
        #!/bin/bash -xe
        # Creating basic build directory tree
        mkdir -p api data charts coverage dist logs php-code-browser
        # Determine sqlite directory
        if [ -d "/var/lib/jenkins/tmpfs" ]
        then
            sqlitedir="/var/lib/jenkins/tmpfs/$JOB_NAME"
            mkdir -p $sqlitedir
        else
            sqlitedir="$WORKSPACE/data"
        fi
        # Ensure LocalSettings.php and my_wiki.sqlite don't exists
        rm -f LocalSettings.php
        rm -f "$sqlitedir/my_wiki.sqlite"
        # Run MediaWiki installer
        php maintenance/install.php \
        --confpath $WORKSPACE \
        --dbtype=sqlite \
        --dbname=my_wiki \
        --dbpath=$sqlitedir \
        --showexceptions=true \
        --pass testpass \
        sqlitetest \
        WikiAdmin
        # Installer will create sqlite db as 644 by jenkins:jenkins
        # Make writable for Apache (bug 47639)
        chmod +w "$sqlitedir/my_wiki.sqlite"

- builder:
    name: mw-setup-extension
    builders:
     - get-mw-core:
          branch: '{mwbranch}'
     - mw-install-sqlite
     - mw-get-extensions:
          dependencies: '{dependencies}'
     - shell: |
        #!/bin/bash -xe
        # Inject in LocalSettings.php some code to automatically load
        # installed extensions.
        echo "require_once( '/var/lib/jenkins/tools/extensions-loader.php' );" \
        >> "$WORKSPACE/LocalSettings.php"
     - mw-run-update-script

- builder:
    name: mw-phpunit
    builders:
      - shell: 'php tests/phpunit/phpunit.php --log-junit junit-phpunit.xml'

- builder:
    name: mw-phpunit-allexts
    builders:
    # We have to move to the tests/phpunit directory where suite.xml is
    # located or the relative paths referenced there will not get
    # resolved by PHPUnit.
    # The publishers are usually expecting the .xml file to be at the
    # root of the workspace, so make sure we use an absolute path.
      - shell: 'cd tests/phpunit && php phpunit.php --log-junit "$WORKSPACE/junit-phpunit-allexts.xml" --testsuite extensions'

# Junit XML file as generated by the phpunit ant target
- publisher:
    name: phpunit-junit
    publishers:
     - xunit:
        types:
         - phpunit:
            pattern: 'logs/junit.xml'

# Python pep8 builder - copied from OpenStack project
- builder:
    name: pep8
    builders:
     - shell: "set -o pipefail ; pep8 . | tee pep8.txt ; set +o pipefail"

# Python pep8 publisher - copied from OpenStack project
- publisher:
    name: pep8
    publishers:
     - violations:
        pep8:
            min: 0
            max: 1
            unstable: 1
            pattern: '**/pep8.txt'

- builder:
    name: pyflakes
    builders:
     - shell: "pyflakes"

- builder:
    name: phplint
    builders:
     - shell: |
        /var/lib/jenkins/bin/git-changed-in-head php php5 inc phtml \
        | xargs -n1 -t php -l

# run phpcs on any .php and .inc files in the workspace
# Except for Messages* and *.i18n.php (such as in installer)
- builder:
    name: phpcs
    builders:
     - shell: |
        phpcs -v -s . \
         --standard=/var/lib/jenkins/tools/mwcodesniffer/MediaWiki \
         --extensions=php,inc \
         --ignore=languages/messages/Messages*.php,*.i18n.php \
         --report-checkstyle=checkstyle-phpcs.xml \
         --report-full

# run phpcs on files changed in HEAD. Ignores:
#  - the mw/core language files
#  - any .js files
- builder:
    name: phpcs-HEAD
    builders:
     - shell: |
        # Get a list of files changed in HEAD, skipping deleted files and css
        # and js files which are interpreted by phpcs but we do not want it to
        # handle.  Piped to 'echo -n' to ignore egrep exit code.
        PHPCS_FILES=$(git diff --name-status HEAD^ \
             | egrep -v '^D' | cut -f2 \
             | egrep '\.(php5?|inc|sample)$' \
             || echo -n
             )
        # No file? No point in proceeding any further (bug 44567)
        if [ -z "$PHPCS_FILES" ]; then
            echo "Skipping phpcs: no file remaining to process"
            exit 0
        fi

        phpcs -v -s $PHPCS_FILES \
         --standard=/var/lib/jenkins/tools/mwcodesniffer/MediaWiki \
         --ignore=languages/messages/Messages,*.i18n.php \
         --report-checkstyle=checkstyle-phpcs.xml \
         --report-full

- publisher:
    name: phpcs
    publishers:
     - violations:
        checkstyle:
            min: 0
            max: 1
            unstable: 1
            pattern: '**/checkstyle-phpcs.xml'


- builder:
    name: php-extension
    builders:
     - shell: |
        phpize
        ./configure
        make
        make test

- builder:
    name: puppet-validate
    builders:
     - shell: |
        find . -type f -name '*.pp' -print0 | xargs -0 puppet parser validate

# Run ruby syntax check against any file named '.rb' under the workspace.
# The ruby interpreter is passed using 'interpreter'
- builder:
    name: ruby-lint
    builders:
     - shell: |
        find "$WORKSPACE" -type f -name '*.rb' -print0 | xargs -t -n1 -0 {interpreter} -c

# Some jobs are not using the git plugin which let us easily wipe
# a current workspace.  This macro is meant to replace that feature
# in jobs not using the git plugin.
# `rm -fR .* *` would attempt to delete '.' and '..' which makes rm
# to return an exit code of 1.  We use find instead.
- builder:
    name: wipe-workspace
    builders:
     - shell: 'echo "Wiping workspace"; find . -not -path . -delete; echo "Done"'

- builder:
    name: yaml-lint
    builders:
     - shell: '/var/lib/jenkins/tools/yamllint.py "$WORKSPACE"'
