# Git comes with a whitespace checking system that will fail whenever the diff
# contains trailing spaces.  We can use that to easily lint whitespaces in
# submitted changes.

# Lint whitespace in directory {dir}. Usefull when the Git repository has
# been fetched out in some subdirtory of the Workspace. Example:
#
#  builder:
#    - lint-whitespaces-in:
#       dir: "$WORKSPACE/extensions/Foobar"
#
- builder:
    name: lint-whitespaces-in
    builders:
        - shell: "git --work-tree=\"{dir}\" diff --color --check HEAD^..HEAD"

# Lint whitespaces under $WORKSPACE. This is most probably the one you
# want to use. Example:
#
# builder:
#  - lint-whitespaces
#
- builder:
    name: lint-whitespaces
    builders:
     - lint-whitespaces-in:
        dir: '$WORKSPACE'

# `get-mw-core` injects mediawiki/core@{requested branch} in $WORKSPACE
# This should be used when testing extensions
#
# The aim is to get the very latest MediaWiki core version into the extension
# workspace without having to fully clone the repository. We cant use git
# archive with Gerrit so we get the code from the local replicated clone.
- builder:
    name: get-mw-core
    builders:
        - shell: |
            #!/bin/bash -xe
            # Snapshot `remotes/origin/{branch}` in the job workspace
            git archive --remote=/var/lib/git/mediawiki/core.git {branch} \
                | (cd "$WORKSPACE" && tar xf -)

- builder:
    name: jshint
    builders:
     - shell: "/var/lib/jenkins/bin/wmfgrunt --cwd \"$WORKSPACE\" jshint"

- builder:
    name: mw-get-extensions
    builders:
        - shell: "/var/lib/jenkins/tools/fetch-mw-ext {dependencies}"

# Inject in LocalSettings.php some code to automatically load
# installed extensions.
- builder:
    name: mw-configure-extensions
    builders:
        - shell: |
            #!/bin/bash -xe
            echo "require_once( '/var/lib/jenkins/tools/extensions-loader.php' );" \
                >> "$WORKSPACE/LocalSettings.php"

- builder:
    name: mw-run-update-script
    builders:
        - shell: 'php "$WORKSPACE/maintenance/update.php" --quick'

- builder:
    name: mw-install-sqlite
    builders:
      - ant:
          targets: "installdb-sqlite"
          buildfile: "/var/lib/jenkins/jobs/_shared/build.xml"

- builder:
    name: mw-phpunit
    builders:
      - shell: 'php tests/phpunit/phpunit.php --log-junit junit-phpunit.xml'

- builder:
    name: mw-phpunit-ext
    builders:
      - shell: 'php tests/phpunit/phpunit.php --log-junit junit-phpunit-ext.xml -- extensions/{extension}'

- builder:
    name: mw-phpunit-allexts
    builders:
# --testsuite is not yet available on gallium :(
#      - shell: 'php tests/phpunit/phpunit.php --log-junit junit-phpunit-allexts.xml --testsuite extensions'
      - shell: 'php tests/phpunit/phpunit.php --log-junit junit-phpunit-allexts.xml -- extensions'

# Python pep8 builder - copied from OpenStack project
- builder:
    name: pep8
    builders:
     - shell: "set -o pipefail ; pep8 . | tee pep8.txt ; set +o pipefail"

# Python pep8 publisher - copied from OpenStack project
- publisher:
    name: pep8
    publishers:
     - violations:
        pep8:
            min: 0
            max: 1
            unstable: 1
            pattern: '**/pep8.txt'

- builder:
    name: php-lint
    builders:
     - ant:
        targets: 'php-lint'
        buildfile: '/var/lib/jenkins/jobs/_shared/build.xml'

- builder:
    name: phpcs
    builders:
     - shell: |
        phpcs -v . \
         --report-checkstyle=checkstyle-phpcs.xml \
         --report-full

- builder:
    name: phpcs-HEAD
    builders:
     - shell: |
        phpcs -v `git diff --name-only HEAD^` \
         --report-checkstyle=checkstyle-phpcs.xml \
         --report-full

- publisher:
    name: phpcs
    publishers:
     - violations:
        checkstyle:
            min: 0
            max: 1
            unstable: 1
            pattern: '**/checkstyle-phpcs.xml'


- builder:
    name: php-extension
    builders:
     - shell: |
        phpize
        ./configure
        make
        make test

# Fetch an extension at the root of the workspace
#
# Example usage:
# scm:
#  - git-mwext-in-root:
#    ext-name: '{ext-name}'
- scm:
    name: git-mwext-in-root
    scm:
     - git:
        url: '/var/lib/zuul/git/mediawiki/extensions/{ext-name}'
        branches:
         - '$ZUUL_BRANCH'
        refspec: '$ZUUL_REF'
